package it.unisalento.se.saw.domain;
// Generated 29-ago-2018 12.34.20 by Hibernate Tools 5.2.0.Final


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="user"
    ,catalog="mydb"
    , uniqueConstraints = @UniqueConstraint(columnNames="email") 
)
@JsonIgnoreProperties({"hibernateLazyInitializer","handler"})
public class User  implements java.io.Serializable {

	@JsonManagedReference
     private Integer idUser;
     private Studycourse studycourse;
     private Usertype usertype;
     private String name;
     private String surname;
     private String email;
     private String password;
     private String fcmtoken;
     private Integer courseYear;
     @JsonBackReference
     private Set<Report> reportsForSecretaryIdSecretary = new HashSet<Report>(0);
     @JsonBackReference
     private Set<Teaching> teachings = new HashSet<Teaching>(0);
     @JsonBackReference
     private Set<Report> reportsForProfessorIdProfessor = new HashSet<Report>(0);
     @JsonBackReference
     private Set<Teachingmaterial> teachingmaterials = new HashSet<Teachingmaterial>(0);
     @JsonBackReference
     private Set<Teaching> teachings_1 = new HashSet<Teaching>(0);
     @JsonBackReference
     private Set<Lecturesatisfaction> lecturesatisfactions = new HashSet<Lecturesatisfaction>(0);
     @JsonBackReference
     private Set<Materialsatisfaction> materialsatisfactions = new HashSet<Materialsatisfaction>(0);

    public User() {
    }

	
    public User(Usertype usertype, String name, String surname, String email, String password) {
        this.usertype = usertype;
        this.name = name;
        this.surname = surname;
        this.email = email;
        this.password = password;
    }
    public User(Studycourse studycourse, Usertype usertype, String name, String surname, String email, String password, String fcmtoken, Integer courseYear, Set<Report> reportsForSecretaryIdSecretary, Set<Teaching> teachings, Set<Report> reportsForProfessorIdProfessor, Set<Teachingmaterial> teachingmaterials, Set<Teaching> teachings_1, Set<Lecturesatisfaction> lecturesatisfactions, Set<Materialsatisfaction> materialsatisfactions) {
       this.studycourse = studycourse;
       this.usertype = usertype;
       this.name = name;
       this.surname = surname;
       this.email = email;
       this.password = password;
       this.fcmtoken = fcmtoken;
       this.courseYear = courseYear;
       this.reportsForSecretaryIdSecretary = reportsForSecretaryIdSecretary;
       this.teachings = teachings;
       this.reportsForProfessorIdProfessor = reportsForProfessorIdProfessor;
       this.teachingmaterials = teachingmaterials;
       this.teachings_1 = teachings_1;
       this.lecturesatisfactions = lecturesatisfactions;
       this.materialsatisfactions = materialsatisfactions;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="idUser", unique=true, nullable=false)
    public Integer getIdUser() {
        return this.idUser;
    }
    
    public void setIdUser(Integer idUser) {
        this.idUser = idUser;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="StudyCourse_idStudyCourse")
    public Studycourse getStudycourse() {
        return this.studycourse;
    }
    
    public void setStudycourse(Studycourse studycourse) {
        this.studycourse = studycourse;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="UserType_idUserType", nullable=false)
    public Usertype getUsertype() {
        return this.usertype;
    }
    
    public void setUsertype(Usertype usertype) {
        this.usertype = usertype;
    }

    
    @Column(name="name", nullable=false, length=45)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="surname", nullable=false, length=45)
    public String getSurname() {
        return this.surname;
    }
    
    public void setSurname(String surname) {
        this.surname = surname;
    }

    
    @Column(name="email", unique=true, nullable=false, length=45)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    
    @Column(name="password", nullable=false, length=45)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="FCMToken", length=450)
    public String getFcmtoken() {
        return this.fcmtoken;
    }
    
    public void setFcmtoken(String fcmtoken) {
        this.fcmtoken = fcmtoken;
    }

    
    @Column(name="CourseYear")
    public Integer getCourseYear() {
        return this.courseYear;
    }
    
    public void setCourseYear(Integer courseYear) {
        this.courseYear = courseYear;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userBySecretaryIdSecretary")
    public Set<Report> getReportsForSecretaryIdSecretary() {
        return this.reportsForSecretaryIdSecretary;
    }
    
    public void setReportsForSecretaryIdSecretary(Set<Report> reportsForSecretaryIdSecretary) {
        this.reportsForSecretaryIdSecretary = reportsForSecretaryIdSecretary;
    }

@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="teaching_has_users", catalog="mydb", joinColumns = { 
        @JoinColumn(name="student_idStudent", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="Teaching_idTeaching", nullable=false, updatable=false) })
    public Set<Teaching> getTeachings() {
        return this.teachings;
    }
    
    public void setTeachings(Set<Teaching> teachings) {
        this.teachings = teachings;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByProfessorIdProfessor")
    public Set<Report> getReportsForProfessorIdProfessor() {
        return this.reportsForProfessorIdProfessor;
    }
    
    public void setReportsForProfessorIdProfessor(Set<Report> reportsForProfessorIdProfessor) {
        this.reportsForProfessorIdProfessor = reportsForProfessorIdProfessor;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<Teachingmaterial> getTeachingmaterials() {
        return this.teachingmaterials;
    }
    
    public void setTeachingmaterials(Set<Teachingmaterial> teachingmaterials) {
        this.teachingmaterials = teachingmaterials;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<Teaching> getTeachings_1() {
        return this.teachings_1;
    }
    
    public void setTeachings_1(Set<Teaching> teachings_1) {
        this.teachings_1 = teachings_1;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<Lecturesatisfaction> getLecturesatisfactions() {
        return this.lecturesatisfactions;
    }
    
    public void setLecturesatisfactions(Set<Lecturesatisfaction> lecturesatisfactions) {
        this.lecturesatisfactions = lecturesatisfactions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<Materialsatisfaction> getMaterialsatisfactions() {
        return this.materialsatisfactions;
    }
    
    public void setMaterialsatisfactions(Set<Materialsatisfaction> materialsatisfactions) {
        this.materialsatisfactions = materialsatisfactions;
    }




}


